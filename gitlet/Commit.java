package gitlet;

import java.util.*;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.Serializable;

import static gitlet.Repository.*;


/** Represents a gitlet commit object.
 *  Commit is set to be Serializable to store in object folder.
 *  @author ChrisWang13
 */

public class Commit implements Serializable {

    /** The initial Commit message. */
    private String message = "initial commit";

    /** ID of each commit, generated by SHA-1 hash. */
    private String ID;

    /** String format of current time. */
    private String timeStamp;

    /** First parent commitID for logging. */
    private String firstParentID;

    /** Second parent commitID found in merge commits. */
    private String mergeParentID;

    /** Copy of storeBlob in Staging, to keep track of Blobs(files) in this commit. */
    public Map<String, String> storeBlobs = new HashMap<>();


     /** Create initial commit with default message. */
    public Commit() {
        // Create Unix Epoch time
        this.firstParentID = new String();
        this.mergeParentID = new String();
        this.timeStamp = dateToTimeStamp(new Date(0));
        this.ID = setID();
    }

    /** Create new commit with designed parentsID and message. */
    public Commit(String parentID, String message) {
        this.message = message;
        this.firstParentID = new String(parentID);
        this.mergeParentID = new String();
        this.timeStamp = dateToTimeStamp(new Date());
        this.ID = setID();
    }

    /** Formatter helper function to return String format of timeStamp. */
    private String dateToTimeStamp(Date date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy Z");
        return dateFormat.format(date);
    }

    /** SHA-1 hash to generate ID for this commit. */
    private String setID() {
        return Utils.sha1(storeBlobs.toString(), firstParentID.toString(), message, timeStamp);
    }

    /** Copy Staging area info to this commit. */
    public void saveStaging2Commit(Staging stage) {
        storeBlobs = new HashMap<>(stage.storeBlobs);
    }

    /** Save current commit to objects folder and make MASTER_PTR head of commit. */
    public void saveCommit() {
        File CURR_COMMIT_FILE = Utils.join(OBJ_DIR, ID);
        Utils.writeObject(CURR_COMMIT_FILE, this);
        Utils.writeObject(MASTER_PTR, this);
    }

    /** Check storeBlob HashMap to see map exists. */
    public boolean IsFileInCommit(String filePath) {
        if (storeBlobs.containsKey(filePath)) {
            return true;
        }
        return false;
    }

    /** Check storeBlob HashMap to see map exists. Remove map obj if exists. */
    public void rmFileInCommit(String filePath) {
        if (storeBlobs.containsKey(filePath)) {
            storeBlobs.remove(filePath);
        }
        Utils.writeObject(MASTER_PTR, this);
    }

    /** Return private ID. */
    public String getID() {
        return ID;
    }

    /** Return firstParentID to create new Commit. */
    public String getFirstParentID() {
        return firstParentID;
    }
    /** Return private timeStamp. */
    public String getTimeStamp() {
        return timeStamp;
    }

    /** Return private commit message. */
    public String getMessage() {
        return message;
    }

    /** Helper function to print log info of this commit. */
    public void printLogInfo() {
        System.out.println("===");
        System.out.println("commit " + this.getID());
        System.out.println("Date: " + this.getTimeStamp());
        System.out.println(this.getMessage() + '\n');
    }

}
