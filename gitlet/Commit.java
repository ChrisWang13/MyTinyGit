package gitlet;

import java.util.*;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.Serializable;

import static gitlet.Repository.*;


/** Represents a gitlet commit object.
 *  Commit is set to be Serializable to store in object folder.
 *  @author ChrisWang13
 */

public class Commit implements Serializable {
    
    /** The initial Commit message. */
    private String message = "initial commit";

    /** ID of each commit, generated by SHA-1 hash. */
    private final String ID;

    /** String format of current time. */
    private final String timeStamp;

    /** First parent commitID for logging. */
    private String firstParentID;

    /** Second parent commitID found in merge commits. */
    private String mergeParentID;

    /** Copy of addBlob in Staging, to keep track of Blobs(files) in this commit. */
    private Map<String, String> savedBlobs = new TreeMap<>();
    
     /** Create initial commit with default message. */
    public Commit() {
        // Create Unix Epoch time
        this.firstParentID = "";
        this.mergeParentID = "";
        this.timeStamp = dateToTimeStamp(new Date(0));
        this.ID = setID();
    }

    /** Create new commit with designed parentsID and message. */
    public Commit(Staging stage, String parentID, String message) {
        // Copy Staging area info to this commit.
        this.savedBlobs = new HashMap<>(stage.getAddBlobs());
        this.message = message;
        this.firstParentID = parentID;
        this.mergeParentID = "";
        this.timeStamp = dateToTimeStamp(new Date());
        this.ID = setID();
    }

    /** Formatter helper function to return String format of timeStamp. */
    private String dateToTimeStamp(Date date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy Z");
        return dateFormat.format(date);
    }

    /** SHA-1 hash to generate ID for this commit. */
    private String setID() {
        return Utils.sha1(savedBlobs.toString(),
                firstParentID, message, timeStamp);
    }

    /** Save current commit to objects folder and make MASTER_PTR head of commit. */
    public void saveCommit() {
        File commitFile = Utils.join(OBJ_DIR, ID);
        Utils.writeObject(commitFile, this);
        Utils.writeObject(MASTER_PTR, this);
    }

    /** Check addBlob HashMap to see map exists. */
    public boolean isFileInCommit(String filePath) {
        return savedBlobs.containsKey(filePath);
    }
    
    /** Get value of <FilePath, ShA1-Hash> pair, */
    public String getCommitFileBlobID(String filePath) {
        if (this.isFileInCommit(filePath)) {
            return this.savedBlobs.get(filePath);
        }
        // File not found in this commit
        return null;
    }

    /** Return private ID. */
    public String getID() {
        return ID;
    }

    /** Return firstParentID to create new Commit. */
    public String getFirstParentID() {
        return firstParentID;
    }

    /** Return private timeStamp. */
    public String getTimeStamp() {
        return timeStamp;
    }

    /** Return private commit message. */
    public String getMessage() {
        return message;
    }

    /** Return a new copied saveBlobs. */
    public Map<String, String> getSavedBlobs() {
        return new HashMap<>(savedBlobs);
    }

    /** Helper function to print log info of this commit. */
    public void printLogInfo() {
        System.out.println("===");
        System.out.println("commit " + this.getID());
        System.out.println("Date: " + this.getTimeStamp());
        System.out.println(this.getMessage() + '\n');
    }

}
