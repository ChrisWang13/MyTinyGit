package gitlet;

import java.util.*;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.Serializable;

import static gitlet.Repository.*;


/** Represents a gitlet commit object.
 *  Commit is set to be Serializable to store in object folder.
 *  @author ChrisWang13
 */

public class Commit implements Serializable {

    /** The initial Commit message. */
    private String message = "initial commit";

    /** ID of each commit, generated by SHA-1 hash. */
    private String ID;

    /** String format of current time. */
    private String timeStamp;

    /** A commit might have several parents, select which parent base on ID. */
    private List<String> parent = new ArrayList<>();

    /** Create initial commit with default message. */
    public Commit() {
        // Create Unix Epoch time
        this.timeStamp = "Date: " + dateToTimeStamp(new Date(0));
        this.ID = setID();
    }

    /** Create new commit with designed parentsID and message. */
    public Commit(List<String> parent, String message) {
        this.message = message;
        this.parent = parent;
        this.timeStamp = "Date: " + dateToTimeStamp(new Date());
        this.ID = setID();
    }

    /** Formatter helper function to return String format of timeStamp. */
    private String dateToTimeStamp(Date date) {
        SimpleDateFormat dateFormat= new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy");
        return dateFormat.format(date);
    }

    /** SHA-1 hash to generate ID for this commit. */
    private String setID() {
        return Utils.sha1(Repository.curStage.storeBlobs.toString(), parent.toString(), message, timeStamp);
    }

    /** Init new Commit with its parents. */
    public List<String> getParentID() {
        return parent;
    }

    /** Save current commit to objects folder and make MASTER_PTR head of commit. */
    public void saveCommit() {
        File CURR_COMMIT_FILE = Utils.join(OBJ_DIR, ID);
        Utils.writeObject(CURR_COMMIT_FILE, this);
        Utils.writeObject(MASTER_PTR, this);
    }

    /** Return private ID. */
    public String getID() {
        return ID;
    }

    /** Return private timeStamp. */
    public String getTimeStamp() {
        return timeStamp;
    }

    /** Return private commit message. */
    public String getMessage() {
        return message;
    }

    /** Helper function to print log info of this commit. */
    public void printLogInfo() {
        System.out.println("===");
        System.out.println("commit " + this.getID());
        System.out.println("Date: " + this.getTimeStamp());
        System.out.println(this.getMessage());
    }

}
